#!/bin/bash
#
# Update data
#
# Main script for building/updating the data files used by the viewer.
#

source config.sh

BDIR="${DIR}/bin"
DDIR="${DIR}/data/downloads"
SDIR="${DIR}/data/genomedata"
LOG="${DIR}/data/LOG"

mkdir -p ${DDIR}
mkdir -p ${SDIR}

# generate genome list file (a simple table of genome names and labels)
genomeList="${DIR}/data/genomeList.tsv"
echo "name	label" > "${genomeList}"
count=0
for sn in "${ALL_GENOME_NAMES[@]}"
do : 
    slbl="${ALL_GENOME_LABELS[count]}"
    echo "${sn}	${slbl}" >> "${genomeList}"
    count=$(expr $count + 1)
done

# generate MGI secondary-to-primary ID mapping file
secondaryIdFile="${DDIR}/mgiSecondaryIds.tsv"
python "${BDIR}/getMgiSecondaryIds.py" > "${secondaryIdFile}"

function download {
   genome=$1
   fname="${DDIR}/$2"
   url="${BASEURL}/${genome}/$2"
   featFile="${SDIR}/${genome}-features.tsv"
   chrFile="${SDIR}/${genome}-chromosomes.tsv"
   ixFile="${SDIR}/${genome}-index.tsv"
   #
   echo ${genome}
   echo "Downloading:" "${url}" to "${fname}"
   curl -R -z ${fname} -o ${fname} $url
   #
   echo "Generating:" "${featFile}" "${chrFile}" "${ixFile}"
   gunzip -c "${fname}" \
       | grep -v "^#" \
       | grep -v "Parent=" \
       | grep -v biological_region \
       | sort -k 1,1 -k 4,4n \
       | python "${BDIR}/prepGenomeFile.py" -m "${secondaryIdFile}" -o "${featFile}" -c "${chrFile}"
   python "${BDIR}/indexFeatures.py" -f "${featFile}" -x "${ixFile}" -a create
}


for sn in "${ALL_GENOME_NAMES[@]}"
do : 
    # For every genome name, there is an env var of that name containing the file name for that genome
    # This gets the file name.
    eval fname=\$$sn
    # call the download function for this pair
    download "${sn}" "${fname}"
    echo ${sn}
done

exit
./generateBlockFiles


# THE END
